// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __hypergeo_RcppExports_h__
#define __hypergeo_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace hypergeo {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("hypergeo", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("hypergeo", "_hypergeo_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in hypergeo");
            }
        }
    }

    inline arma::cx_vec complex_gamma(const arma::cx_vec z) {
        typedef SEXP(*Ptr_complex_gamma)(SEXP);
        static Ptr_complex_gamma p_complex_gamma = NULL;
        if (p_complex_gamma == NULL) {
            validateSignature("arma::cx_vec(*complex_gamma)(const arma::cx_vec)");
            p_complex_gamma = (Ptr_complex_gamma)R_GetCCallable("hypergeo", "hypergeo_complex_gamma");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_complex_gamma(Rcpp::wrap(z));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::cx_vec >(__result);
    }

    inline Rcpp::ComplexVector complex_gamma_cpp(const Rcpp::NumericVector& real, const Rcpp::NumericVector& imag) {
        typedef SEXP(*Ptr_complex_gamma_cpp)(SEXP,SEXP);
        static Ptr_complex_gamma_cpp p_complex_gamma_cpp = NULL;
        if (p_complex_gamma_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*complex_gamma_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
            p_complex_gamma_cpp = (Ptr_complex_gamma_cpp)R_GetCCallable("hypergeo", "hypergeo_complex_gamma_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_complex_gamma_cpp(Rcpp::wrap(real), Rcpp::wrap(imag));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(__result);
    }

    inline arma::cx_vec genhypergeo_series(const arma::cx_vec U, const arma::cx_vec L, arma::cx_vec z, const double tol, const int maxiter, const bool check_mod, const bool polynomial) {
        typedef SEXP(*Ptr_genhypergeo_series)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_series p_genhypergeo_series = NULL;
        if (p_genhypergeo_series == NULL) {
            validateSignature("arma::cx_vec(*genhypergeo_series)(const arma::cx_vec,const arma::cx_vec,arma::cx_vec,const double,const int,const bool,const bool)");
            p_genhypergeo_series = (Ptr_genhypergeo_series)R_GetCCallable("hypergeo", "hypergeo_genhypergeo_series");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_genhypergeo_series(Rcpp::wrap(U), Rcpp::wrap(L), Rcpp::wrap(z), Rcpp::wrap(tol), Rcpp::wrap(maxiter), Rcpp::wrap(check_mod), Rcpp::wrap(polynomial));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::cx_vec >(__result);
    }

    inline Rcpp::ComplexVector genhypergeo_series_cpp(const Rcpp::NumericVector& real_U, const Rcpp::NumericVector& imag_U, const Rcpp::NumericVector& real_L, const Rcpp::NumericVector& imag_L, const Rcpp::NumericVector& real_z, const Rcpp::NumericVector& imag_z, const double tol, const int maxiter, const bool check_mod, const bool polynomial) {
        typedef SEXP(*Ptr_genhypergeo_series_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_series_cpp p_genhypergeo_series_cpp = NULL;
        if (p_genhypergeo_series_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*genhypergeo_series_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const double,const int,const bool,const bool)");
            p_genhypergeo_series_cpp = (Ptr_genhypergeo_series_cpp)R_GetCCallable("hypergeo", "hypergeo_genhypergeo_series_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_genhypergeo_series_cpp(Rcpp::wrap(real_U), Rcpp::wrap(imag_U), Rcpp::wrap(real_L), Rcpp::wrap(imag_L), Rcpp::wrap(real_z), Rcpp::wrap(imag_z), Rcpp::wrap(tol), Rcpp::wrap(maxiter), Rcpp::wrap(check_mod), Rcpp::wrap(polynomial));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(__result);
    }

    inline arma::cx_vec lanczos(arma::cx_vec z) {
        typedef SEXP(*Ptr_lanczos)(SEXP);
        static Ptr_lanczos p_lanczos = NULL;
        if (p_lanczos == NULL) {
            validateSignature("arma::cx_vec(*lanczos)(arma::cx_vec)");
            p_lanczos = (Ptr_lanczos)R_GetCCallable("hypergeo", "_hypergeo_lanczos");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_lanczos(Rcpp::wrap(z));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::cx_vec >(__result);
    }

    inline Rcpp::ComplexVector lanczos_cpp(const Rcpp::NumericVector& real, const Rcpp::NumericVector& imag) {
        typedef SEXP(*Ptr_lanczos_cpp)(SEXP,SEXP);
        static Ptr_lanczos_cpp p_lanczos_cpp = NULL;
        if (p_lanczos_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*lanczos_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
            p_lanczos_cpp = (Ptr_lanczos_cpp)R_GetCCallable("hypergeo", "_hypergeo_lanczos_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_lanczos_cpp(Rcpp::wrap(real), Rcpp::wrap(imag));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(__result);
    }

}

#endif // __hypergeo_RcppExports_h__
