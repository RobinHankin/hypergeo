// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_hypergeo_RCPPEXPORTS_H_GEN_
#define RCPP_hypergeo_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace hypergeo {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("hypergeo", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("hypergeo", "_hypergeo_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in hypergeo");
            }
        }
    }

    inline arma::cx_vec complex_lngamma(const arma::cx_vec z) {
        typedef SEXP(*Ptr_complex_lngamma)(SEXP);
        static Ptr_complex_lngamma p_complex_lngamma = NULL;
        if (p_complex_lngamma == NULL) {
            validateSignature("arma::cx_vec(*complex_lngamma)(const arma::cx_vec)");
            p_complex_lngamma = (Ptr_complex_lngamma)R_GetCCallable("hypergeo", "_hypergeo_complex_lngamma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_complex_lngamma(Shield<SEXP>(Rcpp::wrap(z)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cx_vec >(rcpp_result_gen);
    }

    inline Rcpp::ComplexVector complex_lngamma_cpp(const Rcpp::NumericVector& real, const Rcpp::NumericVector& imag) {
        typedef SEXP(*Ptr_complex_lngamma_cpp)(SEXP,SEXP);
        static Ptr_complex_lngamma_cpp p_complex_lngamma_cpp = NULL;
        if (p_complex_lngamma_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*complex_lngamma_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
            p_complex_lngamma_cpp = (Ptr_complex_lngamma_cpp)R_GetCCallable("hypergeo", "_hypergeo_complex_lngamma_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_complex_lngamma_cpp(Shield<SEXP>(Rcpp::wrap(real)), Shield<SEXP>(Rcpp::wrap(imag)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(rcpp_result_gen);
    }

    inline arma::cx_vec genhypergeo_series(const arma::cx_vec U, const arma::cx_vec L, arma::cx_vec z, const double tol, const int maxiter, const bool check_mod, const bool polynomial) {
        typedef SEXP(*Ptr_genhypergeo_series)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_series p_genhypergeo_series = NULL;
        if (p_genhypergeo_series == NULL) {
            validateSignature("arma::cx_vec(*genhypergeo_series)(const arma::cx_vec,const arma::cx_vec,arma::cx_vec,const double,const int,const bool,const bool)");
            p_genhypergeo_series = (Ptr_genhypergeo_series)R_GetCCallable("hypergeo", "_hypergeo_genhypergeo_series");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_genhypergeo_series(Shield<SEXP>(Rcpp::wrap(U)), Shield<SEXP>(Rcpp::wrap(L)), Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(maxiter)), Shield<SEXP>(Rcpp::wrap(check_mod)), Shield<SEXP>(Rcpp::wrap(polynomial)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cx_vec >(rcpp_result_gen);
    }

    inline Rcpp::ComplexVector genhypergeo_series_cpp(const Rcpp::NumericVector& real_U, const Rcpp::NumericVector& imag_U, const Rcpp::NumericVector& real_L, const Rcpp::NumericVector& imag_L, const Rcpp::NumericVector& real_z, const Rcpp::NumericVector& imag_z, const double tol, const int maxiter, const bool check_mod, const bool polynomial) {
        typedef SEXP(*Ptr_genhypergeo_series_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_series_cpp p_genhypergeo_series_cpp = NULL;
        if (p_genhypergeo_series_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*genhypergeo_series_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&,const double,const int,const bool,const bool)");
            p_genhypergeo_series_cpp = (Ptr_genhypergeo_series_cpp)R_GetCCallable("hypergeo", "_hypergeo_genhypergeo_series_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_genhypergeo_series_cpp(Shield<SEXP>(Rcpp::wrap(real_U)), Shield<SEXP>(Rcpp::wrap(imag_U)), Shield<SEXP>(Rcpp::wrap(real_L)), Shield<SEXP>(Rcpp::wrap(imag_L)), Shield<SEXP>(Rcpp::wrap(real_z)), Shield<SEXP>(Rcpp::wrap(imag_z)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(maxiter)), Shield<SEXP>(Rcpp::wrap(check_mod)), Shield<SEXP>(Rcpp::wrap(polynomial)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(rcpp_result_gen);
    }

    inline arma::cx_vec lanczos(arma::cx_vec z) {
        typedef SEXP(*Ptr_lanczos)(SEXP);
        static Ptr_lanczos p_lanczos = NULL;
        if (p_lanczos == NULL) {
            validateSignature("arma::cx_vec(*lanczos)(arma::cx_vec)");
            p_lanczos = (Ptr_lanczos)R_GetCCallable("hypergeo", "_hypergeo_lanczos");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lanczos(Shield<SEXP>(Rcpp::wrap(z)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cx_vec >(rcpp_result_gen);
    }

    inline Rcpp::ComplexVector lanczos_cpp(const Rcpp::NumericVector& real, const Rcpp::NumericVector& imag) {
        typedef SEXP(*Ptr_lanczos_cpp)(SEXP,SEXP);
        static Ptr_lanczos_cpp p_lanczos_cpp = NULL;
        if (p_lanczos_cpp == NULL) {
            validateSignature("Rcpp::ComplexVector(*lanczos_cpp)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
            p_lanczos_cpp = (Ptr_lanczos_cpp)R_GetCCallable("hypergeo", "_hypergeo_lanczos_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lanczos_cpp(Shield<SEXP>(Rcpp::wrap(real)), Shield<SEXP>(Rcpp::wrap(imag)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::ComplexVector >(rcpp_result_gen);
    }

}

#endif // RCPP_hypergeo_RCPPEXPORTS_H_GEN_
